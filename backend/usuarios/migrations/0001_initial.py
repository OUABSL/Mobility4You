# Generated by Django 5.1.9 on 2025-07-11 16:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('lugares', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('fecha_nacimiento', models.DateField(blank=True, help_text='Solo requerido para usuarios cliente/empresa, no para admin', null=True, verbose_name='Fecha de nacimiento')),
                ('sexo', models.CharField(blank=True, choices=[('masculino', 'Masculino'), ('femenino', 'Femenino'), ('no_indicado', 'Prefiero no contestar')], default='no_indicado', help_text='Solo requerido para usuarios cliente/empresa', max_length=20, null=True, verbose_name='Sexo')),
                ('nacionalidad', models.CharField(blank=True, help_text='Solo requerido para usuarios cliente/empresa', max_length=100, null=True, verbose_name='Nacionalidad')),
                ('tipo_documento', models.CharField(blank=True, choices=[('pasaporte', 'Pasaporte'), ('dni', 'DNI'), ('nif', 'NIF'), ('nie', 'NIE')], help_text='Solo requerido para usuarios cliente/empresa', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Tipo de documento inválido', regex='^(pasaporte|dni|nif|nie)$')], verbose_name='Tipo de documento')),
                ('numero_documento', models.CharField(blank=True, help_text='Solo requerido para usuarios cliente/empresa', max_length=20, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Número de documento inválido', regex='^[A-Z0-9]{6,20}$')], verbose_name='Número de documento')),
                ('imagen_carnet', models.ImageField(blank=True, null=True, upload_to='carnets/', verbose_name='Imagen de carnet')),
                ('telefono', models.CharField(blank=True, help_text='Número de teléfono de contacto, no se solicitará al segundo conductor, de allí que sea opcional. Se validará a nivel de frontend y endpoint que el conductor primario tenga un número de teléfono válido.', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Número de teléfono inválido', regex='^\\+?1?\\d{9,15}$')], verbose_name='Teléfono')),
                ('rol', models.CharField(blank=True, choices=[('cliente', 'Cliente'), ('admin', 'Administrador'), ('empresa', 'Empresa')], default='cliente', help_text='Admin no necesita rol específico (se maneja con is_superuser)', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Rol inválido', regex='^(cliente|admin|empresa)$')], verbose_name='Rol')),
                ('idioma', models.CharField(default='es', max_length=10, verbose_name='Idioma')),
                ('activo', models.BooleanField(default=False, help_text='Indica si el usuario está activo. Un usuario inactivo no podrá iniciar sesión.', verbose_name='Activo')),
                ('acepta_recibir_ofertas', models.BooleanField(default=False, help_text='Indica si el usuario acepta recibir ofertas y promociones por email.', verbose_name='Acepta recibir ofertas')),
                ('registrado', models.BooleanField(default=False, verbose_name='Registrado')),
                ('verificado', models.BooleanField(default=False, help_text='Indica si el usuario ha verificado su cuenta a través del email de confirmación.', verbose_name='Verificado')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('password', models.CharField(blank=True, help_text='Dejar vacío para usuarios cliente que no requieren login. Para admin/empresa debe tener valor.', max_length=128, null=True, verbose_name='password')),
                ('direccion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usuarios', to='lugares.direccion')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='usuario_set', related_query_name='usuario', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='usuario_permissions_set', related_query_name='usuario_permission', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'usuario',
                'indexes': [models.Index(fields=['email', 'activo'], name='usuario_email_9c481d_idx'), models.Index(fields=['numero_documento'], name='usuario_numero__30fc7f_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
