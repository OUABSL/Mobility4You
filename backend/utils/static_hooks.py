# utils/static_hooks.py
"""
Sistema de hooks autom√°ticos para versionado de archivos est√°ticos
Se ejecuta autom√°ticamente en varios puntos del ciclo de vida de la aplicaci√≥n
"""
import logging
import os

from django.apps import AppConfig
from django.core.management import call_command
from django.db.models.signals import post_migrate
from django.dispatch import receiver

logger = logging.getLogger(__name__)

class StaticVersioningHooks:
    """
    Maneja hooks autom√°ticos para el versionado de archivos est√°ticos
    """
    
    @staticmethod
    def run_auto_versioning():
        """Ejecuta el versionado autom√°tico de forma segura"""
        try:
            from utils.smart_static_versioning import auto_version_static_files
            success = auto_version_static_files()
            
            if success:
                logger.info("‚úÖ Auto-versionado de archivos est√°ticos completado")
            else:
                logger.warning("‚ö†Ô∏è Auto-versionado fall√≥, usando fallbacks")
                
        except Exception as e:
            logger.error(f"‚ùå Error en auto-versionado: {e}")
            # En caso de error, asegurar que el sistema siga funcionando
            StaticVersioningHooks.ensure_fallback_mapping()
    
    @staticmethod
    def ensure_fallback_mapping():
        """Asegura que existe un mapeo de fallback funcional"""
        try:
            mapping_file = os.path.join(
                os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
                "utils", "static_mapping.py"
            )
            
            # Si no existe el archivo de mapeo, crear uno b√°sico
            if not os.path.exists(mapping_file):
                fallback_content = '''# Mapeo de fallback para archivos est√°ticos
# Generado autom√°ticamente como fallback de emergencia

VERSIONED_ASSETS = {
    "css": "admin/css/custom_admin.css",
    "js_vehiculos": "admin/js/vehiculos_admin.js",
    "js_politicas": "admin/js/politicas_admin.js",
    "js_usuarios": "admin/js/usuarios_admin.js",
    "js_payments": "admin/js/payments_admin.js",
    "js_reservas": "admin/js/reservas_admin.js",
    "js_comunicacion": "admin/js/comunicacion_admin.js",
    "js_lugares": "admin/js/lugares_admin.js",
}

def get_versioned_asset(asset_key, fallback=None):
    """Obtiene la ruta del asset versionado o fallback si no existe"""
    return VERSIONED_ASSETS.get(asset_key, fallback or asset_key)

GENERATED_AT = 'fallback'
'''
                
                with open(mapping_file, 'w', encoding='utf-8') as f:
                    f.write(fallback_content)
                
                logger.info(f"‚úÖ Archivo de mapeo de fallback creado: {mapping_file}")
                
        except Exception as e:
            logger.error(f"‚ùå Error creando mapeo de fallback: {e}")


# Hooks de se√±ales Django

@receiver(post_migrate)
def auto_version_after_migrate(sender, **kwargs):
    """
    Se ejecuta autom√°ticamente despu√©s de migraciones
    √ötil para despliegues en producci√≥n
    """
    # Solo ejecutar para la app principal para evitar ejecuciones m√∫ltiples
    if sender.name == 'config':
        logger.info("üîÑ Ejecutando auto-versionado despu√©s de migraci√≥n...")
        StaticVersioningHooks.run_auto_versioning()


def setup_static_versioning_hooks():
    """Configura todos los hooks de versionado"""
    # Asegurar mapeo de fallback al inicializar
    StaticVersioningHooks.ensure_fallback_mapping()
    
    # En desarrollo, ejecutar auto-versionado si es necesario
    if os.environ.get('DJANGO_DEVELOPMENT', False):
        StaticVersioningHooks.run_auto_versioning()


# Hook para collectstatic
def post_collectstatic_hook():
    """Se ejecuta despu√©s de collectstatic"""
    logger.info("üîÑ Ejecutando auto-versionado despu√©s de collectstatic...")
    StaticVersioningHooks.run_auto_versioning()


# Hook para inicio de servidor
def server_startup_hook():
    """Se ejecuta al iniciar el servidor"""
    logger.info("üîÑ Verificando archivos est√°ticos al iniciar servidor...")
    
    try:
        from utils.smart_static_versioning import validate_static_mappings
        errors = validate_static_mappings()
        
        if errors:
            logger.warning("‚ö†Ô∏è Problemas detectados en archivos est√°ticos, ejecutando auto-reparaci√≥n...")
            StaticVersioningHooks.run_auto_versioning()
        else:
            logger.info("‚úÖ Archivos est√°ticos validados correctamente")
            
    except Exception as e:
        logger.error(f"‚ùå Error en validaci√≥n de startup: {e}")
        StaticVersioningHooks.ensure_fallback_mapping()
