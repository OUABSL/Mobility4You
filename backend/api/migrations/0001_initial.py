# Generated by Django 5.1.9 on 2025-05-24 19:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('descripcion', models.TextField(blank=True, null=True, verbose_name='Descripción')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Categoría',
                'verbose_name_plural': 'Categorías',
                'db_table': 'categoria',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Extras',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, verbose_name='Nombre')),
                ('descripcion', models.TextField(blank=True, verbose_name='Descripción')),
                ('precio', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Precio')),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='extras/', verbose_name='Imagen')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Extra',
                'verbose_name_plural': 'Extras',
                'db_table': 'extras',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='GrupoCoche',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('edad_minima', models.PositiveSmallIntegerField(default=21, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(99)], verbose_name='Edad mínima')),
                ('descripcion', models.TextField(blank=True, null=True, verbose_name='Descripción')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Grupo de coche (catalogue)',
                'verbose_name_plural': 'Grupos de coches (catalogue)',
                'db_table': 'grupo_coche',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='PoliticaPago',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=100, verbose_name='Título')),
                ('deductible', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Deductible')),
                ('descripcion', models.TextField(blank=True, null=True, verbose_name='Descripción')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Política de pago',
                'verbose_name_plural': 'Políticas de pago',
                'db_table': 'politica_pago',
                'ordering': ['titulo'],
            },
        ),
        migrations.CreateModel(
            name='TipoPenalizacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre del tipo de penalización p.e cancelación | devolución tardía | recogida tardía | etc.', max_length=100, unique=True, verbose_name='Nombre')),
                ('tipo_tarifa', models.CharField(choices=[('porcentaje', 'Porcentaje'), ('fijo', 'Fijo'), ('importe_dia', 'Importe por día')], help_text='Tipo de tarifa para calcular la penalización', max_length=20, verbose_name='Tipo de tarifa')),
            ],
            options={
                'verbose_name': 'Tipo de penalización',
                'verbose_name_plural': 'Tipos de penalización',
                'db_table': 'tipo_penalizacion',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Contenido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('blog', 'Blog'), ('faq', 'FAQ'), ('legal', 'Legal'), ('info', 'Información'), ('mini_section', 'Sección mínima')], max_length=20, verbose_name='Tipo')),
                ('titulo', models.CharField(max_length=255, verbose_name='Título')),
                ('subtitulo', models.CharField(blank=True, max_length=255, null=True, verbose_name='Subtítulo')),
                ('cuerpo', models.TextField(blank=True, null=True, verbose_name='Cuerpo')),
                ('info_adicional', models.JSONField(blank=True, null=True, verbose_name='Información adicional')),
                ('icono_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='Icono')),
                ('activo', models.BooleanField(default=False, verbose_name='Activo')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Contenido',
                'verbose_name_plural': 'Contenidos',
                'db_table': 'contenido',
                'ordering': ['tipo', 'titulo'],
                'indexes': [models.Index(fields=['tipo', 'activo'], name='contenido_tipo_17a18a_idx')],
            },
        ),
        migrations.CreateModel(
            name='Direccion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calle', models.CharField(blank=True, max_length=255, null=True, verbose_name='Calle')),
                ('ciudad', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ciudad')),
                ('provincia', models.CharField(blank=True, max_length=100, null=True, verbose_name='Provincia')),
                ('pais', models.CharField(default='España', max_length=100, verbose_name='País')),
                ('codigo_postal', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Código postal inválido', regex='^\\d{4,10}$')], verbose_name='Código Postal')),
            ],
            options={
                'verbose_name': 'Dirección',
                'verbose_name_plural': 'Direcciones',
                'db_table': 'direccion',
                'indexes': [models.Index(fields=['ciudad', 'provincia', 'pais'], name='direccion_ciudad_e14639_idx')],
            },
        ),
        migrations.CreateModel(
            name='Lugar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, verbose_name='Nombre')),
                ('latitud', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Latitud')),
                ('longitud', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Longitud')),
                ('telefono', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Número de teléfono inválido', regex='^\\+?1?\\d{9,15}$')], verbose_name='Teléfono')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('icono_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='Icono')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('direccion', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, related_name='lugar', to='api.direccion')),
            ],
            options={
                'verbose_name': 'Lugar',
                'verbose_name_plural': 'Lugares',
                'db_table': 'lugar',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='PoliticaIncluye',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(max_length=255, verbose_name='Item')),
                ('incluye', models.BooleanField(default=True, verbose_name='Incluye')),
                ('politica', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='api.politicapago')),
            ],
            options={
                'verbose_name': 'Item de política',
                'verbose_name_plural': 'Items de políticas',
                'db_table': 'politica_incluye',
            },
        ),
        migrations.CreateModel(
            name='Promocion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, verbose_name='Nombre')),
                ('descripcion', models.TextField(blank=True, null=True, verbose_name='Descripción')),
                ('descuento_pct', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='Descuento (%)')),
                ('fecha_inicio', models.DateField(verbose_name='Fecha de inicio')),
                ('fecha_fin', models.DateField(verbose_name='Fecha de fin')),
                ('activo', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Promoción',
                'verbose_name_plural': 'Promociones',
                'db_table': 'promocion',
                'ordering': ['-fecha_inicio'],
                'indexes': [models.Index(fields=['activo', 'fecha_inicio', 'fecha_fin'], name='promocion_activo_b4d901_idx')],
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_recogida', models.DateTimeField(verbose_name='Fecha de recogida')),
                ('fecha_devolucion', models.DateTimeField(verbose_name='Fecha de devolución')),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('confirmada', 'Confirmada'), ('cancelada', 'Cancelada')], default='pendiente', max_length=20, verbose_name='Estado')),
                ('precio_dia', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Precio por día')),
                ('precio_impuestos', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Precio impuestos')),
                ('precio_total', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Precio total')),
                ('metodo_pago', models.CharField(choices=[('tarjeta', 'Tarjeta'), ('efectivo', 'Efectivo')], default='tarjeta', help_text='Método de pago utilizado para la reserva', max_length=20, verbose_name='Método de pago')),
                ('importe_pagado_inicial', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Importe pagado inicial')),
                ('importe_pendiente_inicial', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Importe pendiente inicial')),
                ('importe_pagado_extra', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Importe pagado extra')),
                ('importe_pendiente_extra', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Importe pendiente extra')),
                ('notas_internas', models.TextField(blank=True, null=True, verbose_name='Notas internas')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('lugar_devolucion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='devoluciones', to='api.lugar')),
                ('lugar_recogida', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='recogidas', to='api.lugar')),
                ('politica_pago', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='reservas', to='api.politicapago')),
                ('promocion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservas', to='api.promocion')),
            ],
            options={
                'verbose_name': 'Reserva',
                'verbose_name_plural': 'Reservas',
                'db_table': 'reserva',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Factura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_factura', models.CharField(max_length=50, unique=True, verbose_name='Número de factura')),
                ('fecha_emision', models.DateField(verbose_name='Fecha de emisión')),
                ('base_imponible', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Base imponible')),
                ('iva', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='IVA')),
                ('total', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Total')),
                ('url_pdf', models.URLField(blank=True, max_length=500, null=True, verbose_name='URL del PDF')),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('emitida', 'Emitida'), ('anulada', 'Anulada')], default='pendiente', max_length=20, verbose_name='Estado')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('reserva', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facturas', to='api.reserva')),
            ],
            options={
                'verbose_name': 'Factura',
                'verbose_name_plural': 'Facturas',
                'db_table': 'factura',
                'ordering': ['-fecha_emision'],
            },
        ),
        migrations.CreateModel(
            name='Contrato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_contrato', models.CharField(max_length=50, unique=True, verbose_name='Número de contrato')),
                ('fecha_firma', models.DateField(blank=True, null=True, verbose_name='Fecha de firma')),
                ('condiciones', models.TextField(blank=True, null=True, verbose_name='Condiciones')),
                ('url_pdf', models.URLField(blank=True, max_length=500, null=True, verbose_name='URL del PDF')),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('firmado', 'Firmado'), ('anulado', 'Anulado')], default='pendiente', max_length=20, verbose_name='Estado')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('reserva', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contratos', to='api.reserva')),
            ],
            options={
                'verbose_name': 'Contrato',
                'verbose_name_plural': 'Contratos',
                'db_table': 'contrato',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReservaExtra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.PositiveIntegerField(default=1, verbose_name='Cantidad')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('extra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservas_extra', to='api.extras')),
                ('reserva', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extras', to='api.reserva')),
            ],
            options={
                'verbose_name': 'Extra de reserva',
                'verbose_name_plural': 'Extras de reserva',
                'db_table': 'reserva_extra',
                'ordering': ['extra__nombre'],
            },
        ),
        migrations.CreateModel(
            name='PoliticaPenalizacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('horas_previas', models.PositiveSmallIntegerField(default=0, help_text='Horas previas a la penalización: Se define el número de horas antes de la penalización, por ejemplo, 24h antes de la recogida.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Horas previas')),
                ('politica_pago', models.ForeignKey(help_text='Política de pago a la que se aplica la penalización: Se define una política de pago y se le pueden asociar penalizaciones.', on_delete=django.db.models.deletion.CASCADE, related_name='penalizaciones', to='api.politicapago')),
                ('tipo_penalizacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='politicas', to='api.tipopenalizacion')),
            ],
            options={
                'verbose_name': 'Política de penalización',
                'verbose_name_plural': 'Políticas de penalización',
                'db_table': 'politica_penalizacion',
            },
        ),
        migrations.CreateModel(
            name='Penalizacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('importe', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Importe')),
                ('fecha', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Fecha')),
                ('descripcion', models.TextField(blank=True, null=True, verbose_name='Descripción')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('reserva', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='penalizaciones', to='api.reserva')),
                ('tipo_penalizacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='penalizaciones', to='api.tipopenalizacion')),
            ],
            options={
                'verbose_name': 'Penalización',
                'verbose_name_plural': 'Penalizaciones',
                'db_table': 'penalizacion',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('fecha_nacimiento', models.DateField(verbose_name='Fecha de nacimiento')),
                ('sexo', models.CharField(choices=[('masculino', 'Masculino'), ('femenino', 'Femenino'), ('no_indicado', 'Prefiero no contestar')], default='no_indicado', max_length=20, verbose_name='Sexo')),
                ('nacionalidad', models.CharField(max_length=100, verbose_name='Nacionalidad')),
                ('tipo_documento', models.CharField(choices=[('pasaporte', 'Pasaporte'), ('dni', 'DNI'), ('nif', 'NIF'), ('nie', 'NIE')], default='pasaporte', max_length=20, validators=[django.core.validators.RegexValidator(message='Tipo de documento inválido', regex='^(pasaporte|dni|nif|nie)$')], verbose_name='Tipo de documento')),
                ('numero_documento', models.CharField(help_text='Número de documento de identificación (DNI, NIF, NIE, Pasaporte)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Número de documento inválido', regex='^[A-Z0-9]{6,20}$')], verbose_name='Número de documento')),
                ('imagen_carnet', models.ImageField(blank=True, null=True, upload_to='carnets/', verbose_name='Imagen de carnet')),
                ('telefono', models.CharField(blank=True, help_text='Número de teléfono de contacto, no se solicitará al segundo conductor, de allí que sea opcional. Se validará a nivel de frontend y endpoint que el conductor primario tenga un número de teléfono válido.', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Número de teléfono inválido', regex='^\\+?1?\\d{9,15}$')], verbose_name='Teléfono')),
                ('rol', models.CharField(choices=[('cliente', 'Cliente'), ('admin', 'Administrador'), ('empresa', 'Empresa')], default='cliente', max_length=20, validators=[django.core.validators.RegexValidator(message='Rol inválido', regex='^(cliente|admin|empresa)$')], verbose_name='Rol')),
                ('idioma', models.CharField(default='es', max_length=10, verbose_name='Idioma')),
                ('activo', models.BooleanField(default=False, help_text='Indica si el usuario está activo. Un usuario inactivo no podrá iniciar sesión.', verbose_name='Activo')),
                ('acepta_recibir_ofertas', models.BooleanField(default=False, help_text='Indica si el usuario acepta recibir ofertas y promociones por email.', verbose_name='Acepta recibir ofertas')),
                ('registrado', models.BooleanField(default=False, verbose_name='Registrado')),
                ('verificado', models.BooleanField(default=False, help_text='Indica si el usuario ha verificado su cuenta a través del email de confirmación.', verbose_name='Verificado')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('password', models.CharField(blank=True, help_text='Dejar vacío para usuarios cliente que no requieren login. Para admin/empresa debe tener valor.', max_length=128, null=True, verbose_name='password')),
                ('direccion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usuarios', to='api.direccion')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='usuario_set', related_query_name='usuario', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='usuario_permissions_set', related_query_name='usuario_permission', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'usuario',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ReservaConductor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rol', models.CharField(choices=[('principal', 'Principal'), ('secundario', 'Secundario')], default='principal', help_text='Rol del conductor en la reserva', max_length=20, verbose_name='Rol')),
                ('reserva', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conductores', to='api.reserva')),
                ('conductor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conducciones', to='api.usuario')),
            ],
            options={
                'verbose_name': 'Conductor de reserva',
                'verbose_name_plural': 'Conductores de reserva',
                'db_table': 'reserva_conductor',
            },
        ),
        migrations.AddField(
            model_name='reserva',
            name='usuario',
            field=models.ForeignKey(on_delete=models.SET(-1), related_name='reservas', to='api.usuario'),
        ),
        migrations.CreateModel(
            name='Vehiculo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('combustible', models.CharField(choices=[('Gasolina', 'Gasolina'), ('Diesel', 'Diésel'), ('Híbrido', 'Híbrido'), ('Eléctrico', 'Eléctrico')], max_length=20, verbose_name='Combustible')),
                ('marca', models.CharField(max_length=100, verbose_name='Marca')),
                ('modelo', models.CharField(max_length=100, verbose_name='Modelo')),
                ('matricula', models.CharField(max_length=20, unique=True, verbose_name='Matrícula')),
                ('anio', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2030)], verbose_name='Año')),
                ('color', models.CharField(max_length=50, verbose_name='Color')),
                ('num_puertas', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(5)], verbose_name='Número de puertas')),
                ('num_pasajeros', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(9)], verbose_name='Número de pasajeros')),
                ('capacidad_maletero', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Capacidad maletero (L)')),
                ('disponible', models.BooleanField(default=False, verbose_name='Disponible')),
                ('activo', models.BooleanField(default=False, verbose_name='Activo')),
                ('notas_internas', models.TextField(blank=True, null=True, verbose_name='Notas internas')),
                ('fianza', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Fianza')),
                ('kilometraje', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Kilometraje')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='vehiculos', to='api.categoria')),
                ('grupo', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='vehiculos', to='api.grupocoche')),
            ],
            options={
                'verbose_name': 'Vehículo',
                'verbose_name_plural': 'Vehículos',
                'db_table': 'vehiculo',
                'ordering': ['marca', 'modelo'],
            },
        ),
        migrations.CreateModel(
            name='TarifaVehiculo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_inicio', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha de inicio')),
                ('fecha_fin', models.DateField(blank=True, help_text='Dejar en blanco para tarifa indefinida', null=True, verbose_name='Fecha de fin')),
                ('precio_dia', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Precio por día')),
                ('vehiculo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tarifas', to='api.vehiculo')),
            ],
            options={
                'verbose_name': 'Tarifa de vehículo',
                'verbose_name_plural': 'Tarifas de vehículos',
                'db_table': 'tarifa_vehiculo',
            },
        ),
        migrations.AddField(
            model_name='reserva',
            name='vehiculo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='reservas', to='api.vehiculo'),
        ),
        migrations.CreateModel(
            name='Mantenimiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Fecha')),
                ('tipo_servicio', models.CharField(max_length=200, verbose_name='Tipo de servicio')),
                ('coste', models.DecimalField(decimal_places=2, help_text='Coste del servicio de mantenimiento: Se puede dejar en blanco si se desea.', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Coste')),
                ('notas', models.TextField(blank=True, null=True, verbose_name='Notas')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('vehiculo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mantenimientos', to='api.vehiculo')),
            ],
            options={
                'verbose_name': 'Mantenimiento',
                'verbose_name_plural': 'Mantenimientos',
                'db_table': 'mantenimiento',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='ImagenVehiculo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=500, verbose_name='URL de imagen')),
                ('portada', models.BooleanField(default=False, verbose_name='¿Es Imagen de portada?')),
                ('ancho', models.PositiveIntegerField(blank=True, null=True, verbose_name='Ancho')),
                ('alto', models.PositiveIntegerField(blank=True, null=True, verbose_name='Alto')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('vehiculo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imagenes', to='api.vehiculo')),
            ],
            options={
                'verbose_name': 'Imagen de vehículo',
                'verbose_name_plural': 'Imágenes de vehículos',
                'db_table': 'imagen_vehiculo',
                'ordering': ['vehiculo', '-portada'],
            },
        ),
        migrations.AddIndex(
            model_name='lugar',
            index=models.Index(fields=['nombre'], name='lugar_nombre_751abe_idx'),
        ),
        migrations.AddIndex(
            model_name='lugar',
            index=models.Index(fields=['latitud', 'longitud'], name='lugar_latitud_e38017_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='politicaincluye',
            unique_together={('politica', 'item')},
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['numero_factura'], name='factura_numero__d7656a_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['estado', 'fecha_emision'], name='factura_estado_220e3f_idx'),
        ),
        migrations.AddIndex(
            model_name='contrato',
            index=models.Index(fields=['numero_contrato'], name='contrato_numero__ddbd27_idx'),
        ),
        migrations.AddIndex(
            model_name='contrato',
            index=models.Index(fields=['estado', 'fecha_firma'], name='contrato_estado_ae644c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reservaextra',
            unique_together={('reserva', 'extra')},
        ),
        migrations.AlterUniqueTogether(
            name='politicapenalizacion',
            unique_together={('politica_pago', 'tipo_penalizacion')},
        ),
        migrations.AddIndex(
            model_name='penalizacion',
            index=models.Index(fields=['reserva', 'tipo_penalizacion'], name='penalizacio_reserva_b00fc7_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['email', 'activo'], name='usuario_email_9c481d_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['numero_documento'], name='usuario_numero__30fc7f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reservaconductor',
            unique_together={('reserva', 'conductor')},
        ),
        migrations.AddIndex(
            model_name='vehiculo',
            index=models.Index(fields=['disponible', 'activo'], name='vehiculo_disponi_106f66_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiculo',
            index=models.Index(fields=['marca', 'modelo'], name='vehiculo_marca_f892df_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiculo',
            index=models.Index(fields=['matricula'], name='vehiculo_matricu_6d49d3_idx'),
        ),
        migrations.AddIndex(
            model_name='tarifavehiculo',
            index=models.Index(fields=['vehiculo', 'fecha_inicio', 'fecha_fin'], name='idx_tarifa_vehiculo_periodo'),
        ),
        migrations.AlterUniqueTogether(
            name='tarifavehiculo',
            unique_together={('vehiculo', 'fecha_inicio')},
        ),
        migrations.AddIndex(
            model_name='reserva',
            index=models.Index(fields=['fecha_recogida', 'fecha_devolucion'], name='idx_reserva_fechas'),
        ),
        migrations.AddIndex(
            model_name='reserva',
            index=models.Index(fields=['estado', 'created_at'], name='reserva_estado_9cac5c_idx'),
        ),
        migrations.AddIndex(
            model_name='mantenimiento',
            index=models.Index(fields=['vehiculo', 'fecha'], name='mantenimien_vehicul_2510b5_idx'),
        ),
        migrations.AddIndex(
            model_name='imagenvehiculo',
            index=models.Index(fields=['vehiculo', 'portada'], name='imagen_vehi_vehicul_af9d3a_idx'),
        ),
    ]
