"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import sys
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Detectar entorno y cargar el archivo .env adecuado
env = environ.Env()
DJANGO_ENV = os.environ.get('DJANGO_ENV', 'development')
if DJANGO_ENV == 'production':
    env_file = os.path.join(BASE_DIR, '.env.prod')
else:
    env_file = os.path.join(BASE_DIR, '.env')
environ.Env.read_env(env_file)

# Secret key y debug desde el entorno
SECRET_KEY = env('SECRET_KEY', default='claveprivadatemporal')
DEBUG = env.bool('DEBUG', default=(DJANGO_ENV != 'production'))
ALLOWED_HOSTS = env.list('ALLOWED_HOST', default=['localhost', '127.0.0.1'])


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-f16j8h&!wzwu5(kuuoru==z1#r7j85_hxhntu0uj7a(vr7ud2o'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

#Cambiar ALLOWED_HOSTS para permitir conexiones locales:
# ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', # Agregado
    'corsheaders', # Agregado
    'api', # Agregado
    'payments', # Agregado por Ouael el 18-05
    'django_filters', # Agregado por Ouael el 22-05
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Agregado
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env('MYSQL_DATABASE', default='mobility4you'),
        'USER': env('MYSQL_USER', default='mobility'),
        'PASSWORD': env('MYSQL_PASSWORD', default='miclave'),
        'HOST': env('DB_HOST', default='db'),  # 'db' para Docker Compose, 'localhost' para local
        'PORT': env('DB_PORT', default='3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',  # MariaDB usa el mismo backend que MySQL
#         'NAME': os.environ.get('MYSQL_DATABASE', 'nombre_basedatos'),
#         'USER': os.environ.get('MYSQL_USER', 'usuario'),
#         'PASSWORD': os.environ.get('MYSQL_PASSWORD', 'contraseña'),
#         'HOST': 'db',  # Nombre del servicio en docker-compose
#         'PORT': '3306',
#         'OPTIONS': {
#             'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
#         },
#     }
# }



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


#Agregado
# REST_FRAMEWORK = {
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.AllowAny',  # Permite acceso público (ajústalo según necesidad)
#     ],
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework.authentication.SessionAuthentication',
#         'rest_framework.authentication.BasicAuthentication',
#     ],
# }


#NUEVO 
# También agregar la configuración de filtros en REST_FRAMEWORK
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': [  # ← AGREGAR ESTAS LÍNEAS
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # ← OPCIONAL
    'PAGE_SIZE': 20  # ← OPCIONAL
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/django-static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files (uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CORS (Cross-Origin Resource Sharing) settings
# Permitir solicitudes CORS desde el frontend
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost",
    "http://127.0.0.1",
]

CORS_ALLOW_CREDENTIALS = True

# Configuración CSRF para las notificaciones de Redsys
CSRF_TRUSTED_ORIGINS = [
    'https://sis.redsys.es',
    'https://sis-t.redsys.es',
]



# Configuración Redsys
REDSYS_MERCHANT_CODE = env('REDSYS_MERCHANT_CODE', default='999008881')
REDSYS_TERMINAL = env('REDSYS_TERMINAL', default='001')
REDSYS_SECRET_KEY = env('REDSYS_SECRET_KEY', default='sq7HjrUOBfKmC576ILgskD5srU870gJ7')
REDSYS_ENVIRONMENT = env('REDSYS_ENVIRONMENT', default='test')  # test o production

# URL del frontend para redirecciones
FRONTEND_URL = env('FRONTEND_URL', default='http://localhost:3000')

# Configuración de Email
EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = env('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = env.int('EMAIL_PORT', default=587)
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='noreply@mobilityfor-you.com')

# Email específico para mensajes de contacto
CONTACT_EMAIL = env('CONTACT_EMAIL', default='info@mobilityfor-you.com')

# Configuración de plantillas
TEMPLATES[0]['DIRS'].append(os.path.join(BASE_DIR, 'templates'))

# Configuración de logging para emails y admin
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'admin_formatter': {
            'format': '[{asctime}] {levelname} - {name} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'help.log'),
            'formatter': 'verbose',
        },
        'admin_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'admin_operations.log'),
            'formatter': 'admin_formatter',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'emails': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'admin_operations': {
            'handlers': ['admin_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
