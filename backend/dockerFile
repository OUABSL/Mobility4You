# Usa una imagen oficial de Python como base
FROM python:3.10-slim-bullseye

# Establecer variables de entorno
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    pkg-config \
    default-libmysqlclient-dev \
    build-essential \
    gettext \
    libpq-dev \
    libffi-dev \
    gcc \
    mariadb-client \
    netcat-openbsd \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Establece el directorio de trabajo en el contenedor
WORKDIR /app

# Copiar requirements primero para aprovechar la caché
COPY requirements.txt /app/
RUN pip install --upgrade pip && pip install --no-cache-dir -r requirements.txt

# Limpiar directorios __pycache__ y archivos .pyc
RUN find . -type d -name "__pycache__" -exec rm -r {} +
RUN find . -type f -name "*.pyc" -delete

# Copiar el resto del código fuente al contenedor
COPY . /app/

# Eliminar migraciones anteriores (excepto __init__.py)
RUN find ./api/migrations -type f -name "*.py" ! -name "__init__.py" -delete

# Crear directorio de logs y archivos estáticos
RUN mkdir -p /app/logs && touch /app/logs/django.log && chmod 666 /app/logs/django.log
RUN mkdir -p /app/staticfiles

# Script de entrada
COPY ./entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Exponer puerto
EXPOSE 8000

ENTRYPOINT ["/entrypoint.sh"]
CMD ["gunicorn", "config.wsgi:application", "--bind", "0.0.0.0:8000", "--workers", "4"]