# Dockerfile para Backend Django - Arquitectura Modular
# Apps: usuarios, vehiculos, reservas, politicas, facturas_contratos, comunicacion

# Usa una imagen oficial de Python como base
FROM python:3.10-slim-bullseye AS base

# Establecer variables de entorno
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100

# Instalar dependencias del sistema necesarias para Django y PostgreSQL
RUN apt-get update && apt-get install -y \
    pkg-config \
    build-essential \
    gettext \
    libpq-dev \
    libffi-dev \
    gcc \
    postgresql-client \
    netcat-openbsd \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Establece el directorio de trabajo en el contenedor
WORKDIR /app

# Copiar requirements primero para aprovechar la caché
COPY requirements.txt /app/
RUN pip install --upgrade pip && pip install --no-cache-dir -r requirements.txt

# Limpiar directorios __pycache__ y archivos .pyc
RUN find . -type d -name "__pycache__" -exec rm -r {} +
RUN find . -type f -name "*.pyc" -delete

# Copiar el resto del código fuente al contenedor
COPY . /app/

# Limpiar archivos de migración existentes para regeneración modular
RUN echo "Limpiando migraciones para arquitectura modular..." && \
    for app in usuarios vehiculos reservas politicas facturas_contratos comunicacion; do \
        if [ -d "./$app/migrations" ]; then \
            find "./$app/migrations" -type f -name "*.py" ! -name "__init__.py" -delete 2>/dev/null || true; \
            echo "Limpiadas migraciones de $app"; \
        fi; \
    done && \
    # Limpiar migraciones de app api legacy si existe
    if [ -d "./api/migrations" ]; then \
        find "./api/migrations" -type f -name "*.py" ! -name "__init__.py" -delete 2>/dev/null || true; \
        echo "Limpiadas migraciones legacy de api"; \
    fi

# Crear directorios necesarios para la aplicación
RUN mkdir -p /app/logs /app/staticfiles /app/media && \
    touch /app/logs/django.log && \
    chmod 666 /app/logs/django.log && \
    echo "Directorios de aplicación creados"

# Copiar el entrypoint optimizado
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Exponer puerto
EXPOSE 8000

# Health check para verificar que el servidor Django responde
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

ENTRYPOINT ["/entrypoint.sh"]
CMD ["gunicorn", "config.wsgi:application", "--bind", "0.0.0.0:8000", "--workers", "4", "--timeout", "120"]