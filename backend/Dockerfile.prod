# Dockerfile para Backend Django - Producción
# Arquitectura Modular: usuarios, vehiculos, reservas, politicas, facturas_contratos, comunicacion

# Stage 1: Base con dependencias
FROM python:3.10-slim-bullseye AS base

# Variables de entorno para producción
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    pkg-config \
    default-libmysqlclient-dev \
    build-essential \
    gettext \
    libpq-dev \
    libffi-dev \
    gcc \
    mariadb-client \
    netcat-openbsd \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Stage 2: Dependencias Python
FROM base AS dependencies

COPY requirements.txt /app/
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Stage 3: Aplicación final
FROM dependencies AS production

# Copiar código fuente
COPY . /app/

# Limpiar migraciones para regeneración modular
RUN echo "Limpiando migraciones para arquitectura modular..." && \
    for app in usuarios vehiculos reservas politicas facturas_contratos comunicacion; do \
        if [ -d "./$app/migrations" ]; then \
            find "./$app/migrations" -type f -name "*.py" ! -name "__init__.py" -delete 2>/dev/null || true; \
            echo "Limpiadas migraciones de $app"; \
        fi; \
    done && \
    if [ -d "./api/migrations" ]; then \
        find "./api/migrations" -type f -name "*.py" ! -name "__init__.py" -delete 2>/dev/null || true; \
        echo "Limpiadas migraciones legacy de api"; \
    fi

# Crear directorios y configurar permisos
RUN mkdir -p /app/logs /app/staticfiles /app/media && \
    touch /app/logs/django.log && \
    chmod 666 /app/logs/django.log

# Crear usuario no-root para seguridad en producción
RUN groupadd -r django && \
    useradd -r -g django django && \
    chown -R django:django /app

# Crear entrypoint básico que será sobrescrito por volumen montado
RUN echo '#!/bin/bash\n\
echo "=== ENTRYPOINT PRODUCCIÓN ==="\n\
echo "DB_HOST: $DB_HOST"\n\
until nc -z $DB_HOST 3306; do sleep 2; done\n\
echo "✅ Base de datos disponible"\n\
python manage.py migrate\n\
python manage.py collectstatic --noinput\n\
exec "$@"' > /entrypoint.sh && \
    chmod +x /entrypoint.sh && \
    chown django:django /entrypoint.sh

# El usuario se cambiará después del entrypoint para evitar problemas de permisos con volúmenes

# Exponer puerto
EXPOSE 8000

# Health check optimizado para producción
HEALTHCHECK --interval=60s --timeout=30s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

ENTRYPOINT ["/entrypoint.sh"]
CMD ["sh", "-c", "su django -c 'gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --worker-class sync --timeout 120 --keep-alive 5 --max-requests 1000 --max-requests-jitter 50 --access-logfile - --error-logfile -'"]
