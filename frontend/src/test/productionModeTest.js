/**
 * Prueba espec√≠fica para fetchPoliticasPago() en modo producci√≥n (DEBUG_MODE = false)
 * Este test verifica que la funci√≥n funcione correctamente cuando DEBUG_MODE est√° desactivado
 */

// Importar la funci√≥n a probar
import { fetchPoliticasPago, DEBUG_MODE } from '../services/reservationServices.js';

console.log('=== PRUEBA DE POL√çTICAS DE PAGO EN MODO PRODUCCI√ìN ===');
console.log(`üîß DEBUG_MODE actual: ${DEBUG_MODE}`);

// Test para verificar comportamiento en modo producci√≥n
async function testProductionMode() {
  console.log('\n--- Test 1: Verificar estado de DEBUG_MODE ---');
  
  if (DEBUG_MODE === false) {
    console.log('‚úÖ DEBUG_MODE est√° correctamente configurado en FALSE (modo producci√≥n)');
  } else {
    console.log('‚ùå DEBUG_MODE no est√° en FALSE. Valor actual:', DEBUG_MODE);
    return;
  }

  console.log('\n--- Test 2: Llamada a fetchPoliticasPago() en modo producci√≥n ---');
  console.log('‚è≥ Realizando llamada a la API en modo producci√≥n...');
  
  try {
    const startTime = Date.now();
    const politicas = await fetchPoliticasPago();
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log(`‚úÖ Llamada exitosa en ${duration}ms`);
    console.log(`üìä Pol√≠ticas obtenidas: ${politicas.length}`);
    
    // Validar estructura de datos
    if (Array.isArray(politicas)) {
      console.log('‚úÖ Respuesta es un array v√°lido');
      
      if (politicas.length > 0) {
        console.log('‚úÖ Se obtuvieron pol√≠ticas de pago');
        
        // Validar estructura de la primera pol√≠tica
        const primeraPolitica = politicas[0];
        const camposRequeridos = ['id', 'titulo', 'descripcion', 'activo'];
        const tieneCamposRequeridos = camposRequeridos.every(campo => 
          primeraPolitica.hasOwnProperty(campo)
        );
        
        if (tieneCamposRequeridos) {
          console.log('‚úÖ Estructura de datos v√°lida');
          console.log('üìã Muestra de pol√≠tica:', {
            id: primeraPolitica.id,
            titulo: primeraPolitica.titulo,
            descripcion: primeraPolitica.descripcion?.substring(0, 50) + '...',
            activo: primeraPolitica.activo
          });
        } else {
          console.log('‚ö†Ô∏è  Estructura de datos no contiene todos los campos requeridos');
          console.log('Campos encontrados:', Object.keys(primeraPolitica));
        }
        
        // Verificar que solo se devuelvan pol√≠ticas activas
        const politicasInactivas = politicas.filter(p => p.activo !== true);
        if (politicasInactivas.length === 0) {
          console.log('‚úÖ Todas las pol√≠ticas devueltas est√°n activas');
        } else {
          console.log(`‚ö†Ô∏è  Se encontraron ${politicasInactivas.length} pol√≠ticas inactivas`);
        }
        
      } else {
        console.log('‚ö†Ô∏è  No se obtuvieron pol√≠ticas de pago');
      }
    } else {
      console.log('‚ùå La respuesta no es un array v√°lido');
      console.log('Tipo de respuesta:', typeof politicas);
    }
    
  } catch (error) {
    console.log('‚ùå Error en la llamada a la API:');
    console.log('Tipo de error:', error.constructor.name);
    console.log('Mensaje:', error.message);
    
    // Verificar si es un error de red/API esperado
    if (error.message.includes('Network Error') || 
        error.message.includes('timeout') ||
        error.message.includes('ENOTFOUND') ||
        error.message.includes('connect') ||
        error.response?.status >= 400) {
      console.log('‚ÑπÔ∏è  Error de conexi√≥n esperado en modo producci√≥n sin backend activo');
      console.log('‚úÖ La funci√≥n maneja correctamente los errores de API');
    } else {
      console.log('‚ùå Error inesperado:', error);
    }
  }
}

// Test para verificar que no se usen datos de testing en producci√≥n
async function testNoTestingDataInProduction() {
  console.log('\n--- Test 3: Verificar que no se usen datos de testing ---');
  
  try {
    // Simular un error de API para verificar el comportamiento de fallback
    console.log('‚è≥ Simulando error de API para verificar fallback...');
    
    // En modo producci√≥n, los errores no deber√≠an usar datos de testing
    const originalFetch = global.fetch;
    global.fetch = () => Promise.reject(new Error('Simulated API Error'));
    
    try {
      await fetchPoliticasPago();
      console.log('‚ùå Se esperaba un error pero la funci√≥n tuvo √©xito');
    } catch (error) {
      console.log('‚úÖ Error manejado correctamente en modo producci√≥n');
      console.log('Mensaje de error:', error.message);
      
      // Verificar que no mencione datos de testing
      if (error.message.includes('testing') || error.message.includes('fallback')) {
        console.log('‚ö†Ô∏è  El error menciona datos de testing en modo producci√≥n');
      } else {
        console.log('‚úÖ El error no menciona datos de testing (comportamiento correcto)');
      }
    }
    
    // Restaurar fetch original
    global.fetch = originalFetch;
    
  } catch (error) {
    console.log('Error en test de fallback:', error.message);
  }
}

// Ejecutar las pruebas
async function runAllTests() {
  console.log('üöÄ Iniciando pruebas en modo producci√≥n...\n');
  
  try {
    await testProductionMode();
    await testNoTestingDataInProduction();
    
    console.log('\n=== RESUMEN DE PRUEBAS ===');
    console.log('‚úÖ Pruebas completadas');
    console.log('üìù La funci√≥n fetchPoliticasPago() est√° configurada correctamente para producci√≥n');
    console.log('üîß DEBUG_MODE = false (modo producci√≥n activo)');
    
  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error);
  }
}

// Ejecutar si se llama directamente
if (typeof window === 'undefined') {
  // Entorno Node.js
  runAllTests();
} else {
  // Entorno navegador
  window.runProductionTests = runAllTests;
  console.log('üìã Funciones disponibles en el navegador:');
  console.log('- runProductionTests() - Ejecutar todas las pruebas');
}

export { runAllTests as runProductionTests };
