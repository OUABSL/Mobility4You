/**
 * Test para verificar la migraci√≥n de homeServices.js a database-first approach
 * Este archivo puede ejecutarse en la consola del navegador para probar el flujo
 */

console.log('üß™ INICIANDO PRUEBA DE MIGRACI√ìN HOME SERVICES');
console.log('===============================================');

// Test functions for each migrated service
const testHomeServicesMigration = async () => {
  try {
    // Dynamic import of the home services
    const homeServices = await import('../services/homeServices');
    
    console.log('üìç Testing fetchLocations...');
    try {
      const locations = await homeServices.fetchLocations();
      console.log('‚úÖ fetchLocations success:', locations?.length, 'items');
    } catch (error) {
      console.log('‚ö†Ô∏è fetchLocations fallback triggered:', error.message);
    }
    
    console.log('üìç Testing fetchEstadisticas...');
    try {
      const stats = await homeServices.fetchEstadisticas();
      console.log('‚úÖ fetchEstadisticas success:', stats?.length, 'items');
    } catch (error) {
      console.log('‚ö†Ô∏è fetchEstadisticas fallback triggered:', error.message);
    }
    
    console.log('üìç Testing fetchCaracteristicas...');
    try {
      const features = await homeServices.fetchCaracteristicas();
      console.log('‚úÖ fetchCaracteristicas success:', features?.length, 'items');
    } catch (error) {
      console.log('‚ö†Ô∏è fetchCaracteristicas fallback triggered:', error.message);
    }
    
    console.log('üìç Testing fetchTestimonios...');
    try {
      const testimonials = await homeServices.fetchTestimonios();
      console.log('‚úÖ fetchTestimonios success:', testimonials?.length, 'items');
    } catch (error) {
      console.log('‚ö†Ô∏è fetchTestimonios fallback triggered:', error.message);
    }
    
    console.log('üìç Testing fetchDestinos...');
    try {
      const destinations = await homeServices.fetchDestinos();
      console.log('‚úÖ fetchDestinos success:', destinations?.length, 'items');
    } catch (error) {
      console.log('‚ö†Ô∏è fetchDestinos fallback triggered:', error.message);
    }
    
    console.log('üéâ MIGRACI√ìN HOME SERVICES - PRUEBA COMPLETADA');
    console.log('===============================================');
    
  } catch (error) {
    console.error('‚ùå Error during migration test:', error);
  }
};

// Test location resolution in reservation services
const testLocationResolution = async () => {
  console.log('\nüß™ PRUEBA DE RESOLUCI√ìN DE UBICACIONES');
  console.log('=====================================');
  
  try {
    // Test that location resolution still works
    const { getCachedLocations, findLocationIdByName } = await import('../services/reservationServices');
    
    console.log('üìç Testing getCachedLocations...');
    const locations = await getCachedLocations();
    console.log('‚úÖ getCachedLocations success:', locations?.length, 'locations cached');
    
    if (locations && locations.length > 0) {
      const testLocationName = locations[0].nombre;
      console.log('üìç Testing findLocationIdByName with:', testLocationName);
      const locationId = await findLocationIdByName(testLocationName);
      console.log('‚úÖ findLocationIdByName success:', locationId);
    }
    
    console.log('üéâ RESOLUCI√ìN DE UBICACIONES - PRUEBA COMPLETADA');
    
  } catch (error) {
    console.error('‚ùå Error during location resolution test:', error);
  }
};

// Export for console usage
window.testHomeServicesMigration = testHomeServicesMigration;
window.testLocationResolution = testLocationResolution;

// Auto-run if in browser console
if (typeof window !== 'undefined') {
  console.log('üìã Funciones de prueba disponibles:');
  console.log('‚Ä¢ testHomeServicesMigration() - Prueba migraci√≥n home services');
  console.log('‚Ä¢ testLocationResolution() - Prueba resoluci√≥n de ubicaciones');
  console.log('');
  console.log('üöÄ Para ejecutar prueba completa: testHomeServicesMigration()');
}

export { testHomeServicesMigration, testLocationResolution };
