# ===================================================================
# NGINX FRONTEND STANDALONE CONFIGURATION
# ===================================================================
# 
# ARQUITECTURA: Cliente → Frontend Nginx → Backend Container
# PROPÓSITO: Servir archivos estáticos React + proxy API al backend
# USO: frontend/Dockerfile.prod (frontend standalone sin proxy externo)
# 
# DIFERENCIA con docker/nginx/*.conf:
# - Este sirve archivos estáticos directamente desde /usr/share/nginx/html
# - docker/nginx/*.conf son PROXY que redirigen a otros contenedores
# 
# CUÁNDO SE USA:
# - Deployments de frontend independiente (ej: Render.com frontend service)
# - Testing del frontend en producción sin docker-compose
# ===================================================================

server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Enable gzip compression with optimal settings
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        image/svg+xml
        application/xml
        application/rss+xml
        application/atom+xml
        application/x-font-ttf
        font/opentype;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Handle static assets with long cache and proper CORS
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        try_files $uri $uri/ =404;
    }

    # Handle service worker
    location = /service-worker.js {
        expires off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        try_files $uri =404;
    }

    # Handle API routes - proxy to backend
    # NOTA: Esta configuración es para frontend standalone (sin proxy nginx externo)
    # El backend debe estar accesible como 'backend' en la red Docker
    location /api/ {
        # Resolver DNS dinámicamente para mayor flexibilidad
        resolver 127.0.0.11 valid=30s;
        set $backend_upstream backend:8000;
        proxy_pass http://$backend_upstream;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        
        # CORS headers (solo cuando no hay proxy nginx externo)
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain; charset=utf-8";
            add_header Content-Length 0;
            return 204;
        }
    }

    # Handle admin routes - proxy to backend
    # NOTA: Para frontend standalone, admin va directamente al backend
    location /admin/ {
        resolver 127.0.0.11 valid=30s;
        set $backend_upstream backend:8000;
        proxy_pass http://$backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    # Handle static files from backend
    # NOTA: En frontend standalone, los static files del backend van por proxy
    location /static/ {
        resolver 127.0.0.11 valid=30s;
        set $backend_upstream backend:8000;
        proxy_pass http://$backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Handle media files from backend
    # NOTA: Media files también van por proxy al backend
    location /media/ {
        resolver 127.0.0.11 valid=30s;
        set $backend_upstream backend:8000;
        proxy_pass http://$backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Handle React Router - serve index.html for all routes
    location / {
        try_files $uri $uri/ /index.html;
        
        # Add security headers for HTML content
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
