🔹 1. Crear el Proyecto React
Primero, muévete a la raíz del proyecto y crea la carpeta frontend:



cd movility-for-you
npx create-react-app frontend  # Crea el proyecto React
Esto generará una estructura como esta:

bash

movility-for-you/
│── backend/          # Proyecto Django
│── frontend/         # Proyecto React
│── venv/             # Entorno virtual
│── manage.py         # Django Manager
Luego, entra en la carpeta frontend y ejecuta el servidor de React:



cd frontend
npm start
Si todo funciona bien, deberías ver la app corriendo en http://localhost:3000/ 🎉

🔹 2. Instalar Axios para las Peticiones HTTP
Para conectar React con Django, usaremos Axios. Instálalo en React con:
npm install axios


🔹 3. Configurar el Proxy para evitar CORS
Abre el archivo frontend/package.json y agrega la siguiente línea:

json

"proxy": "http://127.0.0.1:8000",
Esto permitirá que React haga peticiones al backend sin problemas de CORS.

🔹 4. Crear una API en Django para Probar la Conexión
Vamos a crear una API simple en Django que devuelva un mensaje de prueba.

✅ 4.1 Crear una app en Django llamada api
Desde la carpeta backend, ejecuta:
python manage.py startapp api


✅ 4.2 Registrar la app en settings.py
Abre backend/config/settings.py y agrégala en INSTALLED_APPS:

python

INSTALLED_APPS = [
    ...
    'rest_framework',
    'api',
]
✅ 4.3 Crear la vista en api/views.py
Edita backend/api/views.py y agrega:

python

from django.http import JsonResponse

def test_api(request):
    return JsonResponse({"message": "¡Hola desde Django!"})
✅ 4.4 Configurar las rutas en api/urls.py
Crea un archivo backend/api/urls.py y agrega:

python

from django.urls import path
from .views import test_api

urlpatterns = [
    path('test/', test_api, name="test_api"),
]
✅ 4.5 Conectar las rutas en config/urls.py
Edita backend/config/urls.py y agrega:

python

from django.urls import path, include

urlpatterns = [
    path('api/', include('api.urls')),  # Incluir las rutas de la API
]
✅ 4.6 Iniciar el servidor de Django
Ejecuta:



python manage.py runserver
Ahora puedes probar la API en el navegador:
➡️ http://127.0.0.1:8000/api/test/

Si ves {"message": "¡Hola desde Django!"}, ¡todo está bien! ✅

🔹 5. Consumir la API desde React
Ahora, en React, vamos a hacer una petición a Django.

✅ 5.1 Crear un componente ApiTest.js en React
Dentro de frontend/src/, crea un archivo ApiTest.js con este código:

jsx

import React, { useEffect, useState } from "react";
import axios from "axios";

const ApiTest = () => {
    const [message, setMessage] = useState("");

    useEffect(() => {
        axios.get("/api/test/")
            .then(response => {
                setMessage(response.data.message);
            })
            .catch(error => {
                console.error("Error al conectar con la API:", error);
            });
    }, []);

    return (
        <div>
            <h1>Conexión con Django</h1>
            <p>{message}</p>
        </div>
    );
};

export default ApiTest;
✅ 5.2 Mostrar el componente en App.js
Edita frontend/src/App.js e importa ApiTest.js:

jsx

import React from "react";
import ApiTest from "./ApiTest";

function App() {
    return (
        <div>
            <h1>React conectado a Django</h1>
            <ApiTest />
        </div>
    );
}

export default App;
✅ 5.3 Ejecutar React
En la carpeta frontend, ejecuta:



npm start
Abre http://localhost:3000 y deberías ver:

css

React conectado a Django
¡Hola desde Django!