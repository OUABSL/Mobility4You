services:
  # PostgreSQL Database - Optimizado para desarrollo
  db:
    image: postgres:16-alpine
    container_name: mobility4you_postgres_dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - mobility4you_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Django con PostgreSQL
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: mobility4you_backend
    restart: always
    volumes:
      - ../backend:/app
      - static_volume:/app/staticfiles
      - ../backend/logs:/app/logs
    env_file:
      - ../backend/.env-dev
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      # - DJANGO_SETTINGS_MODULE=config.settings  # Usa la configuración del .env
      - DJANGO_ENV=${DJANGO_ENV:-development}
      # Database PostgreSQL
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      # Django Core
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-True}
      - DJANGO_ENV=development
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      # Redis
      - REDIS_URL=redis://redis:6379/0
      # Stripe
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      # URLs
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - BACKEND_URL=${BACKEND_URL:-http://localhost:8000}
    networks:
      - mobility4you_network
    ports:
      - "8000:8000"
  # Frontend React con optimizaciones de desarrollo
  frontend:
    build:
      context: ../frontend
      dockerfile: ./Dockerfile
    container_name: mobility4you_frontend
    restart: always
    volumes:
      - ../frontend/src:/usr/app/src
      - /usr/app/node_modules
    depends_on:
      - backend
    env_file:
      - ../frontend/.env-dev
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    networks:
      - mobility4you_network
  # Nginx como proxy inverso y servidor de archivos estáticos
  nginx:
    image: nginx:1.21
    container_name: mobility4you_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/usr/share/nginx/static
      # media_volume DEPRECATED: Media files now unified in static_volume
    depends_on:
      - frontend
      - backend
    networks:
      - mobility4you_network
    restart: always

  # Redis para caché y sesiones
  redis:
    image: redis:6.2
    container_name: mobility4you_redis
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - mobility4you_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  static_volume:
  redis_data:

networks:
  mobility4you_network:
    driver: bridge
