# docker_operations.ps1
# Script de PowerShell para operaciones Docker con arquitectura modular
# Apps: usuarios, vehiculos, reservas, politicas, facturas_contratos, comunicacion

Write-Host "üê≥ OPERACIONES DOCKER - ARQUITECTURA MODULAR" -ForegroundColor Blue
Write-Host "=============================================" -ForegroundColor Blue

# Funci√≥n para mostrar men√∫
function Show-Menu {
    Write-Host ""
    Write-Host "¬øQu√© operaci√≥n deseas realizar?" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "1)  üöÄ Iniciar desarrollo (docker-compose.yml)" -ForegroundColor Green
    Write-Host "2)  üåü Iniciar producci√≥n (docker-compose.prod.yml)" -ForegroundColor Magenta
    Write-Host "3)  üõë Detener contenedores" -ForegroundColor Red
    Write-Host "4)  üîÑ Reiniciar contenedores" -ForegroundColor Cyan
    Write-Host "5)  üî® Reconstruir backend" -ForegroundColor Yellow
    Write-Host "6)  üìã Ver logs del backend" -ForegroundColor White
    Write-Host "7)  üìã Ver logs de todos los contenedores" -ForegroundColor White
    Write-Host "8)  üè• Verificar salud del sistema" -ForegroundColor Green
    Write-Host "9)  üóÉÔ∏è  Backup de base de datos" -ForegroundColor DarkYellow
    Write-Host "10) üßπ Limpiar im√°genes no usadas" -ForegroundColor DarkRed
    Write-Host "11) üêö Shell del backend" -ForegroundColor DarkGreen
    Write-Host "12) üîç Ver estado de contenedores" -ForegroundColor DarkCyan
    Write-Host "0)  ‚ùå Salir" -ForegroundColor Red
    Write-Host ""
    $choice = Read-Host "Selecciona una opci√≥n (0-12)"
    return $choice
}

# Funci√≥n para iniciar desarrollo
function Start-Development {
    Write-Host "üöÄ Iniciando contenedores de desarrollo..." -ForegroundColor Green
    docker-compose up -d
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Contenedores iniciados correctamente" -ForegroundColor Green
        Write-Host "üåê Frontend: http://localhost:3000" -ForegroundColor Cyan
        Write-Host "üîß Backend: http://localhost:8000" -ForegroundColor Cyan
        Write-Host "üåç Nginx: http://localhost" -ForegroundColor Cyan
    } else {
        Write-Host "‚ùå Error al iniciar contenedores" -ForegroundColor Red
    }
}

# Funci√≥n para iniciar producci√≥n
function Start-Production {
    Write-Host "üåü Iniciando contenedores de producci√≥n..." -ForegroundColor Magenta
    docker-compose -f docker-compose.prod.yml up -d
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Contenedores de producci√≥n iniciados" -ForegroundColor Green
        Write-Host "üîí Aseg√∫rate de que SSL est√© configurado" -ForegroundColor Yellow
    } else {
        Write-Host "‚ùå Error al iniciar contenedores de producci√≥n" -ForegroundColor Red
    }
}

# Funci√≥n para detener contenedores
function Stop-Containers {
    Write-Host "üõë Deteniendo contenedores..." -ForegroundColor Red
    docker-compose down
    docker-compose -f docker-compose.prod.yml down 2>$null
    Write-Host "‚úÖ Contenedores detenidos" -ForegroundColor Green
}

# Funci√≥n para reiniciar contenedores
function Restart-Containers {
    Write-Host "üîÑ Reiniciando contenedores..." -ForegroundColor Cyan
    docker-compose restart
    Write-Host "‚úÖ Contenedores reiniciados" -ForegroundColor Green
}

# Funci√≥n para reconstruir backend
function Rebuild-Backend {
    Write-Host "üî® Reconstruyendo backend..." -ForegroundColor Yellow
    docker-compose build --no-cache backend
    docker-compose up -d backend
    Write-Host "‚úÖ Backend reconstruido" -ForegroundColor Green
}

# Funci√≥n para ver logs del backend
function Show-BackendLogs {
    Write-Host "üìã Mostrando logs del backend..." -ForegroundColor White
    docker-compose logs -f --tail=50 backend
}

# Funci√≥n para ver todos los logs
function Show-AllLogs {
    Write-Host "üìã Mostrando logs de todos los contenedores..." -ForegroundColor White
    docker-compose logs -f --tail=20
}

# Funci√≥n para verificar salud
function Check-Health {
    Write-Host "üè• Verificando salud del sistema..." -ForegroundColor Green
    Write-Host ""
    Write-Host "Estado de contenedores:" -ForegroundColor Yellow
    docker-compose ps
    Write-Host ""
    Write-Host "Uso de recursos:" -ForegroundColor Yellow
    docker stats --no-stream
}

# Funci√≥n para backup de base de datos
function Backup-Database {
    Write-Host "üóÉÔ∏è Creando backup de base de datos..." -ForegroundColor DarkYellow
    $date = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupFile = "backup_mobility4you_$date.sql"
    
    docker-compose exec -T db mysqldump -u mobility -pmiclave mobility4you > $backupFile
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Backup creado: $backupFile" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Error al crear backup" -ForegroundColor Red
    }
}

# Funci√≥n para limpiar im√°genes
function Clean-Images {
    Write-Host "üßπ Limpiando im√°genes no usadas..." -ForegroundColor DarkRed
    docker image prune -f
    docker volume prune -f
    Write-Host "‚úÖ Limpieza completada" -ForegroundColor Green
}

# Funci√≥n para shell del backend
function Backend-Shell {
    Write-Host "üêö Abriendo shell del backend..." -ForegroundColor DarkGreen
    docker-compose exec backend python manage.py shell
}

# Funci√≥n para ver estado
function Show-Status {
    Write-Host "üîç Estado actual del sistema:" -ForegroundColor DarkCyan
    Write-Host ""
    Write-Host "Contenedores activos:" -ForegroundColor Yellow
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    Write-Host ""
    Write-Host "Vol√∫menes:" -ForegroundColor Yellow
    docker volume ls | Where-Object { $_ -match "mobility4you" }
}

# Bucle principal
do {
    $choice = Show-Menu
    
    switch ($choice) {
        "1" { Start-Development }
        "2" { Start-Production }
        "3" { Stop-Containers }
        "4" { Restart-Containers }
        "5" { Rebuild-Backend }
        "6" { Show-BackendLogs }
        "7" { Show-AllLogs }
        "8" { Check-Health }
        "9" { Backup-Database }
        "10" { Clean-Images }
        "11" { Backend-Shell }
        "12" { Show-Status }
        "0" { 
            Write-Host "üëã ¬°Hasta luego!" -ForegroundColor Green
            break 
        }
        default { 
            Write-Host "‚ùå Opci√≥n no v√°lida" -ForegroundColor Red 
        }
    }
    
    if ($choice -ne "0") {
        Write-Host ""
        Read-Host "Presiona Enter para continuar..."
    }
} while ($choice -ne "0")
