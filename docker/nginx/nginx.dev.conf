# docker/nginx/nginx.dev.conf
# Configuración optimizada para desarrollo con mejor manejo de errores y logging

# Buffer y timeout configuration
proxy_buffering on;
proxy_buffer_size 4k;
proxy_buffers 8 4k;
proxy_busy_buffers_size 8k;

# Logging configuration
error_log /var/log/nginx/error.log warn;
access_log /var/log/nginx/access.log combined;

# Rate limiting para protección
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
limit_req_zone $binary_remote_addr zone=admin:10m rate=10r/s;

# Upstream configuration con health checks
upstream backend_server {
    server backend:8000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream frontend_server {
    server frontend:3000 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

server {
    listen 80;
    server_name localhost _;
    
    # Configuración de client size
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Configuración de timeout global
    proxy_connect_timeout       60s;
    proxy_send_timeout          60s;
    proxy_read_timeout          60s;
    send_timeout               60s;
    
    # Headers de proxy globales
    proxy_set_header Host "localhost";  # Fixed host for backend compatibility
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    
    # Headers de conexión
    proxy_set_header Connection "";
    proxy_http_version 1.1;
    
    # ================================
    # HEALTH CHECK ENDPOINT
    # ================================
    location = /nginx-health {
        access_log off;
        return 200 "nginx healthy\n";
        add_header Content-Type text/plain;
    }
    
    # ================================
    # BACKEND ROUTES
    # ================================
    
    # API routes con rate limiting y fallback
    location /api/ {
        # Rate limiting
        limit_req zone=api burst=50 nodelay;
        
        # Headers específicos para API
        proxy_set_header Host "localhost";  # Ensure correct host header
        proxy_set_header Accept-Encoding "";
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-CSRFToken $http_x_csrftoken;
        proxy_pass_header Set-Cookie;
        proxy_pass_request_headers on;
        
        proxy_pass http://backend_server;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 @backend_error;
        error_page 404 @backend_404;
    }
    
    # Admin routes con rate limiting más estricto
    location /admin/ {
        # Rate limiting para admin
        limit_req zone=admin burst=20 nodelay;
        
        # Headers específicos para admin
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-CSRFToken $http_x_csrftoken;
        proxy_pass_header Set-Cookie;
        proxy_pass_request_headers on;
        
        proxy_pass http://backend_server;
        
        # Error handling específico para admin
        proxy_intercept_errors on;
        error_page 502 503 504 @admin_error;
    }
    
    # Redirect /admin sin barra
    location = /admin {
        return 301 /admin/;
    }
    
    # Health check del backend
    location /health/ {
        proxy_pass http://backend_server;
        access_log off;
        
        # Timeout más corto para health checks
        proxy_connect_timeout 5s;
        proxy_read_timeout 5s;
        proxy_send_timeout 5s;
    }
    
    # Archivos estáticos de Django
    location /django-static/ {
        alias /usr/share/nginx/static/;
        
        # Try files first, fallback to backend
        try_files $uri @backend_static;
        
        # Cache para archivos estáticos
        expires 1d;
        add_header Cache-Control "public, immutable";
        
        # Compresión
        gzip_static on;
    }
    
    # Media files con validación
    location /media/ {
        alias /usr/share/nginx/static/media/;
        
        # Try files first, fallback to backend
        try_files $uri @backend_media;
        
        # Validación de tipos de archivo permitidos
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|pdf|doc|docx)$ {
            expires 7d;
            add_header Cache-Control "public";
        }
        
        # Rechazar otros tipos por seguridad
        location ~* \.(php|py|js|exe|bat)$ {
            return 403;
        }
    }
    
    # ================================
    # FRONTEND ROUTES
    # ================================
    
    # WebSocket support para React development server
    location /ws {
        proxy_pass http://frontend_server;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts para WebSocket
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }
    
    # Hot reload para desarrollo
    location /sockjs-node {
        proxy_pass http://frontend_server;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Static assets de React
    location /static/ {
        proxy_pass http://frontend_server;
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # Manifest y service worker
    location ~* \.(manifest\.json|sw\.js|workbox-.*\.js)$ {
        proxy_pass http://frontend_server;
        expires 0;
        add_header Cache-Control "no-cache";
    }
    
    # Frontend routes (todas las demás)
    location / {
        proxy_pass http://frontend_server;
        
        # Headers específicos para frontend
        proxy_set_header Accept-Encoding "";
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_cache_bypass $http_upgrade;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 @frontend_error;
    }
    
    # ================================
    # FALLBACK HANDLERS
    # ================================
    
    # Backend static files fallback
    location @backend_static {
        proxy_pass http://backend_server;
    }
    
    # Backend media files fallback
    location @backend_media {
        proxy_pass http://backend_server;
    }
    
    # ================================
    # ERROR HANDLERS
    # ================================
    
    # Backend error handler
    location @backend_error {
        return 502 '{"success": false, "error": "Error de backend", "message": "Error de comunicación con el servidor"}';
        add_header Content-Type application/json;
    }
    
    # Backend 404 handler
    location @backend_404 {
        return 404 '{"success": false, "error": "Endpoint no encontrado", "message": "La URL solicitada no existe"}';
        add_header Content-Type application/json;
    }
    
    # Admin error handler
    location @admin_error {
        return 502 '<html><body><h1>Admin no disponible</h1><p>El panel de administración está temporalmente no disponible.</p></body></html>';
        add_header Content-Type text/html;
    }
    
    # Frontend error handler
    location @frontend_error {
        return 502 '<html><body><h1>Frontend no disponible</h1><p>La aplicación web está temporalmente no disponible.</p></body></html>';
        add_header Content-Type text/html;
    }
    
    # ================================
    # SECURITY AND OPTIMIZATION
    # ================================
    
    # Ocultar información del servidor
    server_tokens off;
    
    # Compresión
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        application/javascript
        application/json
        application/xml
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # Security headers (sin CORS, el backend se encarga)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
}
